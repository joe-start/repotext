import logging

logger = logging.getLogger(__name__)

def read_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read()
    except UnicodeDecodeError:
        try:
            with open(file_path, 'r', encoding='iso-8859-1') as file:
                return file.read()
        except Exception as e:
            logger.error(f"Error reading file {file_path} with ISO-8859-1 encoding: {str(e)}")
            return f"Error reading file: {file_path}"
    except Exception as e:
        logger.error(f"Error reading file {file_path}: {str(e)}")
        return f"Error reading file: {file_path}"

def write_output(content, output_file, format):
    header = """
This file is a packed representation of the repository, generated by RepoText.
It contains the following sections:
1. Project Structure
2. Dependency Analysis
3. File Contents (with token counts)

Each file's content is preceded by its relative path and token count.
"""
    with open(output_file, 'w') as file:
        if format == 'json':
            import json
            json.dump({'header': header, 'content': content}, file, indent=2)
        elif format == 'md':
            file.write(f"# Repository Content\n\n{header}\n\n{content}")
        else:
            file.write(f"{header}\n\n{content}")